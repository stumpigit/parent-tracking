services:
  api:
    image: stumpisuter/parent-tracking-api:latest
    ports:
      - 8000:8000
    command: uvicorn main:app --host 0.0.0.0 --root-path /hakesch2 --reload
    volumes:
      - ./data:/usr/src/app/data
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - traefik
    labels:
      # Enable Traefik for this specific "backend" service
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.app.loadbalancer.server.port=8000
      # Make Traefik use this domain in HTTP
      # - traefik.http.routers.app-http.entrypoints=http
      # - traefik.http.routers.app-http.rule=Host(`${CATCHMENTAPI_HOSTNAME}`)
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      # Make Traefik use this domain in HTTPS
      # - traefik.http.routers.app-https.entrypoints=https
      # - traefik.http.routers.app-https.rule=Host(`${CATCHMENTAPI_HOSTNAME}`)
      # - traefik.http.routers.app-https.tls=true
      # Use the "le" (Let's Encrypt) resolver
      # - traefik.http.routers.app-https.tls.certresolver=le
      # - traefik.http.routers.app-http.middlewares=https-redirect
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public

  view:
    image: stumpisuter/parent-tracking-frontend:latest
    build: ./src/frontend
    ports:
      - 3000:3000
    command: node build/index.js
    environment:
      ORIGIN: "https://dev.ParentTracking.world"
      NODE_ENV: production
      PUBLIC_HAKESCH_API_PATH: "/../api"
    labels:
      # Enable Traefik for this specific "backend" service
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.app.loadbalancer.server.port=3000
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      - traefik.http.routers.app-http.middlewares=https-redirect
    networks:
      - traefik-public


  worker:
    image: stumpisuter/parent-tracking-worker:latest
    command: celery -A calculations.calculations.app worker --loglevel=info --logfile=./logs/celery.log
    volumes:
      - ./data:/usr/src/app/data
      - ./logs:/usr/src/app/logs
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - api
      - redis
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 8g
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public


  redis:
    image: redis:7
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public

  traefik:
    # Use the latest v2.3.x Traefik image available
    image: traefik:v2.3
    ports:
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - 8333:80
      # Listen on port 443, default for HTTPS
      - 4443:443
    restart: always
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public

    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      # - traefik-public-certificates:/certificates
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:8333
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.https.address=:4443
      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
      # - --certificatesresolvers.le.acme.email=christoph@suter-burri.ch
      # Store the Let's Encrypt certificates in the mounted volume
      # - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Use the TLS Challenge for Let's Encrypt
      # - --certificatesresolvers.le.acme.tlschallenge=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public

#volumes:
  # Create a volume to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates

networks:
  traefik-public:
    external: true
